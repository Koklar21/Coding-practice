"""
import datetime import logging from typing import Any, Dict, List, Tuple
logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(message)s')
class SecurityNodeError(Exception): pass
class SecurityNode: VALID_SEVERITIES = {"Low", "Medium", "High", "Critical"} MAX_FIREWALL_LAYERS = 42
def __init__(self): self.event_log: List[Tuple[datetime.datetime, str]] = [] self.threat_log: List[Dict[str, Any]] = [] self.system_status: Dict[str, str] = {} self.firewall_layer: int = 0 self.security_mode: str = "Normal" self._log_event("Security Node Initialized.") self._update_system_status("Firewall", f"Inactive (Layer {self.firewall_layer}/{self.MAX_FIREWALL_LAYERS})") def _log_event(self, message: str): timestamp = datetime.datetime.utcnow() self.event_log.append((timestamp, message)) logging.info(f"[EVENT] {message}") def _log_threat(self, source: str, description: str, severity: str): if severity not in self.VALID_SEVERITIES: raise SecurityNodeError(f"Invalid severity: {severity}") entry = { "timestamp": datetime.datetime.utcnow(), "source": source, "description": description, "severity": severity } self.threat_log.append(entry) logging.warning(f"[THREAT] {source} | {severity} | {description}") def _update_system_status(self, component: str, status: str): old_status = self.system_status.get(component, "Unknown") self.system_status[component] = status self._log_event(f"{component} status changed from {old_status} to {status}") def advance_firewall(self): if self.firewall_layer >= self.MAX_FIREWALL_LAYERS: raise SecurityNodeError("Firewall is at maximum layer.") self.firewall_layer += 1 difficulty = round(self.firewall_layer * 3.0, 2) self._update_system_status("Firewall", f"Active (Layer {self.firewall_layer}/{self.MAX_FIREWALL_LAYERS}, Difficulty: {difficulty})") def switch_security_mode(self, mode: str): valid_modes = {"Normal", "Elevated", "Lockdown"} if mode not in valid_modes: raise SecurityNodeError(f"Invalid security mode: {mode}") old_mode = self.security_mode self.security_mode = mode self._log_event(f"Security mode changed from {old_mode} to {mode}") def log_threat(self, source: str, description: str, severity: str): self._log_threat(source, description, severity) if severity == "Critical": self.switch_security_mode("Lockdown") def get_summary(self) -> Dict[str, Any]: return { "total_events": len(self.event_log), "total_threats": len(self.threat_log), "firewall_layer": self.firewall_layer, "security_mode": self.security_mode, "system_components": len(self.system_status) } def get_logs(self) -> Dict[str, Any]: return { "event_log": [(ts.isoformat(), msg) for ts, msg in self.event_log], "threat_log": [{**entry, "timestamp": entry["timestamp"].isoformat()} for entry in self.threat_log], "system_status": self.system_status.copy() } 
if name == "main": node = SecurityNode() node._update_system_status("IDS", "Monitoring") node.log_threat("192.168.0.5", "Port scan detected", "Medium") node.log_threat("203.0.113.15", "DDoS signatures identified", "Critical") for _ in range(5): node.advance_firewall() print(node.get_summary()) print(node.get_logs())
